{"version":3,"sources":["model/Cell.ts","state/actions.ts","model/Game.ts","model/Coordinate.ts","state/selectors.ts","components/DificultySelector.tsx","model/Field.ts","model/Mouse.ts","model/Smiley.ts","components/Cell.tsx","components/Board.tsx","components/ThreeDigitCounter.tsx","components/SmileyButton.tsx","components/Header.tsx","components/Game.tsx","components/App.tsx","state/gameHelpers.ts","state/reducer.ts","state/store.ts","index.jsx"],"names":["Cell","setSmileyButton","value","action","onMouseEnter","event","onCellBothClick","x","y","DIFFICULTY_OPTIONS","label","config","mines","width","height","getCoordinatesFromKey","key","parts","split","parseInt","getIndexFromCoordinates","w","getDifficulty","state","difficulty","getGameConfig","getWidth","getTimeCounter","timeCounter","getMinesCounter","minesCounter","getSmileyButton","smileyButton","getMouseLeftElement","mouseLeft","getMouseRightElement","mouseRight","isLeftDown","undefined","isRightDown","isClockRunning","clockRunning","DificultySelector","selectedDifficulty","useSelector","dispatch","useDispatch","react_default","a","createElement","className","map","option","classNames","DS_option_active","onClick","act","isBomb","f","initMineField","cnt","mineFieldSize","mineField","Array","minesArr","i","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","m","neighbourMinesCount","getNeighbourIndexes","ni","reduce","acc","cur","concat","MouseKey","isBlank","cell","blank","isNumber","startsWith","isBombFlag","bombflagged","revealBoardOnDeath","oldBoard","deathIndex","newBoard","Object","toConsumableArray","bombdeath","bombrevealed","open0","open1","open2","open3","open4","open5","open6","open7","open8","bombmisflagged","size","neighbourIndexes","isFirstColumn","isLastColumn","isFirstRow","isLastRow","push","revealBoardOnClick","board","field","filter","SmileyButton","getMouseKey","e","nativeEvent","button","LEFT","RIGHT","MIDDLE","CellComponent","_ref","cellStatus","getCellIndex","getCellStatus","leftPressed","isLeftPressed","rightDown","leftDown","neighbourPressed","mouseLeftElement","_getCoordinatesFromKe","_getCoordinatesFromKe2","X","Y","abs","isNeighbourPressed","pressed","onContextMenu","preventDefault","onMouseDown","target","stopPropagation","onMouseUp","mouseKey","onCellLeftClick","onCellRightClick","onMouseOver","Board","_useSelector","h","border","divs","components_Cell","line","range","getNthDigit","n","pow","ret","ThreeDigitCounter","id","style","backgroundImage","getStyles","margin","marginLeft","marginRight","marginTop","marginBottom","Smiley","smiley","facepressed","facesmile","onMouseOut","ignoreStates","facewin","facedead","includes","Header","intervalRef","useRef","useEffect","current","setInterval","clearInterval","components_ThreeDigitCounter","components_SmileyButton","calcStyle","Game","components_Header","components_Board","App","src_components_DificultySelector","components_Game","handleLeftClickForIndex","index","objectSpread2","gameEnded","win","isWin","getInitialState","arguments","fill","mouseMiddle","gameStarted","reducer","createReducer","handleType","payload","faceooh","_getGameConfig","_action$payload","newMineField","_action$payload2","_action$payload3","nextState","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","es","store","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.081c0d3c.chunk.js","sourcesContent":["import { Field, isBomb, isNumber as isFieldNumber } from \"./Field\";\n\nexport enum Cell {\n  blank = 'blank',\n  pressed = 'pressed',\n  bombflagged = 'bombflagged',\n  bombrevealed = 'bombrevealed',\n  bombmisflagged = 'bombmisflagged',\n  bombdeath = 'bombdeath',\n  open0 = 'open0',\n  open1 = 'open1',\n  open2 = 'open2',\n  open3 = 'open3',\n  open4 = 'open4',\n  open5 = 'open5',\n  open6 = 'open6',\n  open7 = 'open7',\n  open8 = 'open8',\n};\n\nexport const isBlank = (cell: Cell) => cell === Cell.blank;\nexport const isOpen = (cell: Cell) => !isBlank(cell);\nexport const isNumber = (cell: Cell) => cell.startsWith('open');\nexport const isBombFlag = (cell: Cell) => cell === Cell.bombflagged;\n\nexport const initBoard = (w: number, h: number) => {\n  return Array(w * h).fill(Cell.blank);\n};\n\nexport const revealBoardOnDeath = (oldBoard: Cell[], mineField: Field[], deathIndex: number) => {\n  const newBoard = [...oldBoard];\n  for (let i = 0; i < oldBoard.length; ++ i) {\n    const cell = oldBoard[i];\n    const f = mineField[i];\n    if (isNumber(cell)) {\n      continue;\n    }\n    if (isBlank(cell)) {\n      if (isBomb(f)) {\n        newBoard[i] = deathIndex === i ? Cell.bombdeath : Cell.bombrevealed;\n      }\n      if (f === '0') newBoard[i] = Cell.open0;\n      if (f === '1') newBoard[i] = Cell.open1;\n      if (f === '2') newBoard[i] = Cell.open2;\n      if (f === '3') newBoard[i] = Cell.open3;\n      if (f === '4') newBoard[i] = Cell.open4;\n      if (f === '5') newBoard[i] = Cell.open5;\n      if (f === '6') newBoard[i] = Cell.open6;\n      if (f === '7') newBoard[i] = Cell.open7;\n      if (f === '8') newBoard[i] = Cell.open8;\n    }\n    if (isBombFlag(cell)) {\n      newBoard[i] = isBomb(f) ? Cell.bombflagged : Cell.bombmisflagged;\n    }\n  }\n  return newBoard;\n}\n\nexport const getNeighbourIndexes = (i: number, w: number, size: number) => {\n  const neighbourIndexes = [];\n  const isFirstColumn = i % w === 0;\n  const isLastColumn = i % w === w - 1;\n  const isFirstRow = i < w;\n  const isLastRow = i + w >= size;\n  if (!isFirstColumn) neighbourIndexes.push(i - 1);\n  if (!isLastColumn) neighbourIndexes.push(i + 1);\n  if (!isFirstRow) {\n    neighbourIndexes.push(i - w);\n    if (!isFirstColumn) neighbourIndexes.push(i - w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i - w + 1);\n  }\n  if (!isLastRow) {\n    neighbourIndexes.push(i + w);\n    if (!isFirstColumn) neighbourIndexes.push(i + w - 1);\n    if (!isLastColumn) neighbourIndexes.push(i + w + 1);\n  }\n  return neighbourIndexes;\n}\n\nexport const revealBoardOnClick = (board: Cell[], mineField: Field[], i: number, w: number) => {\n  let newBoard = [...board];\n  const field = mineField[i];\n  if (field === '1') { newBoard[i] = Cell.open1; return newBoard; }\n  if (field === '2') { newBoard[i] = Cell.open2; return newBoard; }\n  if (field === '3') { newBoard[i] = Cell.open3; return newBoard; }\n  if (field === '4') { newBoard[i] = Cell.open4; return newBoard; }\n  if (field === '5') { newBoard[i] = Cell.open5; return newBoard; }\n  if (field === '6') { newBoard[i] = Cell.open6; return newBoard; }\n  if (field === '7') { newBoard[i] = Cell.open7; return newBoard; }\n  if (field === '8') { newBoard[i] = Cell.open8; return newBoard; }\n  if (field === '0') {\n    newBoard[i] = Cell.open0;\n    const neighbourIndexes = getNeighbourIndexes(i, w, board.length)\n      .filter(ni => isBlank(board[ni]) && isFieldNumber(mineField[ni]));\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      newBoard = revealBoardOnClick(newBoard, mineField, neighbourIndexes[i], w);\n    }\n  }\n  return newBoard;\n}\n\nexport const isWin = (board: Cell[], mineField: Field[]) => {\n  for (let i = 0; i < board.length; ++i) {\n    const cell = board[i];\n    const field = mineField[i];\n    if ((isBlank(cell) && !isBomb(field)) || (isBombFlag(cell) && !isBomb(field))) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { action } from \"typesafe-actions\";\nimport { DifficultyOption } from \"../model/Game\";\nimport { MouseClickEvent } from \"../model/Mouse\";\nimport { SmileyButton } from \"../model/Smiley\";\n\nexport const SET_DIFFICULTY = 'SET_DIFFICULTY';\nexport const setDifficulty = (difficulty: DifficultyOption) => action(SET_DIFFICULTY, difficulty);\nexport const SET_MINES_COUNTER = 'SET_MINES_COUNTER';\nexport const setMinesCounter = (value: number) => action(SET_MINES_COUNTER, value);\nexport const SET_TIME_COUNTER = 'SET_TIME_COUNTER';\nexport const setTimeCounter = (value: number) => action(SET_TIME_COUNTER, value);\nexport const SET_SMILEY_BUTTON = 'SET_SMILEY_BUTTON';\nexport const setSmileyButton = (value: SmileyButton) => action(SET_SMILEY_BUTTON, value);\n\n\nexport const ON_MOUSE_DOWN = 'ON_MOUSE_DOWN';\nexport const onMouseDown = (event: MouseClickEvent) => action(ON_MOUSE_DOWN, event);\nexport const ON_MOUSE_UP = 'ON_MOUSE_UP';\nexport const onMouseUp = (event: MouseClickEvent) => action(ON_MOUSE_UP, event);\nexport const ON_MOUSE_ENTER = 'ON_MOUSE_ENTER';\nexport const onMouseEnter = (event: MouseClickEvent) => action(ON_MOUSE_ENTER, event);\n\nexport const CLOCK_TICK = 'CLOCK_TICK';\nexport const clockTick = () => action(CLOCK_TICK);\n\nexport const CELL_LEFT_CLICK = 'CELL_LEFT_CLICK';\nexport const onCellLeftClick = (x: number, y: number) => action(CELL_LEFT_CLICK, { x, y });\nexport const CELL_RIGHT_CLICK = 'CELL_RIGHT_CLICK';\nexport const onCellRightClick = (x: number, y: number) => action(CELL_RIGHT_CLICK, { x, y });\nexport const CELL_BOTH_CLICK = 'CELL_BOTH_CLICK';\nexport const onCellBothClick = (x: number, y: number) => action(CELL_BOTH_CLICK, { x, y });\n\nexport const SMILEY_CLICK = 'SMILEY_CLICK';\nexport const onSmileyClick = () => action(SMILEY_CLICK);\n","export type GameConfig = {\n  width: number;\n  height: number;\n  mines: number;\n};\n\nexport type DifficultyOption = {\n  label: string,\n  config: GameConfig;\n};\n\nexport const DIFFICULTY_OPTIONS: DifficultyOption[] = [\n  {\n    label: 'easy',\n    config: {\n      mines:10,\n      width: 9,\n      height: 9,\n    },\n  },\n  {\n    label: 'intermediate',\n    config: {\n      mines: 40,\n      width: 16,\n      height: 16,\n    },\n  },\n  {\n    label: 'expert',\n    config: {\n      mines :99,\n      width: 30,\n      height: 16,\n    },\n  }\n];\n","export type Coordinate = {\n  x: number,\n  y: number,\n};\n\nexport const getCoordinatesFromKey = (key: string) => {\n  const parts = key.split('_');\n  return {\n    x: parseInt(parts[0], 10),\n    y: parseInt(parts[1], 10),\n  };\n}\n\nexport const getIndexFromCoordinates = (x: number, y: number, w: number) => y * w + x;\n","import { getCoordinatesFromKey } from \"../model/Coordinate\";\nimport { RootState } from \"./store\";\n\nexport const getDifficulty = (state: RootState) => state.difficulty;\nexport const getGameConfig = (state: RootState) => state.difficulty.config;\nexport const getWidth = (state: RootState) => getGameConfig(state).width;\n\nexport const getTimeCounter = (state: RootState) => state.timeCounter;\nexport const getMinesCounter = (state: RootState) => state.minesCounter;\nexport const getSmileyButton = (state: RootState) => state.smileyButton;\n\nconst getCellIndex = (x: number, y: number, w: number) => y * w + x;\nexport const getCellStatus = (x: number, y: number) =>\n  (state: RootState) => state.board[getCellIndex(x, y, getWidth(state))];\n\nconst getMouseLeftElement = (state: RootState) => state.mouseLeft;\nconst getMouseRightElement = (state: RootState) => state.mouseRight;\nexport const isLeftPressed = (key: string) => (state: RootState) => getMouseLeftElement(state) === key;\nexport const isRightPressed = (key: string) => (state: RootState) => getMouseRightElement(state) === key;\nexport const isLeftDown = (state: RootState) => getMouseLeftElement(state) !== undefined;\nexport const isRightDown = (state: RootState) => getMouseRightElement(state) !== undefined;\nexport const isNeighbourPressed = (key: string) => (state: RootState) => {\n  const mouseLeftElement = getMouseRightElement(state);\n  if (!mouseLeftElement) {\n    return false;\n  }\n  const { x, y } = getCoordinatesFromKey(key);\n  const { x: X, y: Y } = getCoordinatesFromKey(mouseLeftElement);\n  return Math.abs(x - X) <= 1 && Math.abs(y - Y) <= 1;\n};\n\nexport const isClockRunning = (state: RootState) => state.clockRunning;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DIFFICULTY_OPTIONS } from '../model/Game';\nimport { setDifficulty } from '../state/actions';\nimport { getDifficulty } from '../state/selectors';\nimport './DificultySelector.css';\n\nconst DificultySelector = () => {\n  const selectedDifficulty = useSelector(getDifficulty);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"DS_options\">\n      {DIFFICULTY_OPTIONS.map(option => (\n        <button\n          key={option.label}\n          className={classNames('DS_option', { DS_option_active: selectedDifficulty.label === option.label })}\n          onClick={() => {\n            const act = setDifficulty(option);\n            dispatch(act);\n          }}\n        >\n          {option?.label}\n        </button>\n      ))}\n    </div>\n  );\n}\nexport default DificultySelector;\n","import { getNeighbourIndexes } from \"./Cell\";\nimport { getIndexFromCoordinates } from \"./Coordinate\";\n\nexport type Field = 'X' | 'x' | '0' | '1'  | '2'  | '3'  | '4'  | '5'  | '6'  | '7'  | '8';\n\nexport const isNumber = (f: Field) => f !== 'x' && f !== 'X';\nexport const isBomb = (f: Field) => f === 'x';\n\n\nconst shuffleArray = (array : Field[]) => {\n  var currentIndex = array.length, temporaryValue, randomIndex ;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nexport const initMineField = (width: number, height: number, x: number, y: number, cnt: number) => {\n  const mineFieldSize = width * height;\n  let mineField = Array(mineFieldSize);\n\n  mineField[getIndexFromCoordinates(x, y, width)] = 'X';\n  var minesArr = new Array(mineFieldSize - 1);\n  for (let i = 0; i < cnt; i++){\n    minesArr[i] = 'x';\n  }\n  minesArr = shuffleArray(minesArr);\n\n  for (let i = 0, m = 0; i < mineFieldSize; i++) {\n    if (mineField[i] !== 'X') {\n      mineField[i] = minesArr[m++];\n    }\n  }\n\n  for (let i = 0; i < mineFieldSize; ++i) {\n    if (mineField[i] !== 'x') {\n      const neighbourIndexes = getNeighbourIndexes(i, width, mineFieldSize);\n      const neighbourMines = neighbourIndexes.map(ni => mineField[ni] === 'x' ? 1 : 0);\n      const neighbourMinesCount = neighbourMines.reduce((acc: number, cur) => (acc + cur), 0);\n      mineField[i] = `${neighbourMinesCount}`;\n    }\n  }\n\n  return mineField;\n};\n","export enum MouseKey {\n  LEFT,\n  RIGHT,\n  MIDDLE,\n}\n\nexport interface MouseClickEvent {\n  key?: MouseKey;\n  target: string,\n}\n\nexport const getMouseKey = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n  if (e.nativeEvent.button === 0) {\n    return MouseKey.LEFT;\n  }\n  if (e.nativeEvent.button === 2) {\n    return MouseKey.RIGHT;\n  }\n  return MouseKey.MIDDLE\n};","export enum SmileyButton {\n  facesmile = 'facesmile',\n  facepressed = 'facepressed',\n  facewin = 'facewin',\n  facedead = 'facedead',\n  faceooh = 'faceooh',\n};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Cell } from '../model/Cell';\nimport { getMouseKey, MouseKey } from '../model/Mouse';\nimport { onCellBothClick, onCellLeftClick, onCellRightClick, onMouseDown, onMouseEnter, onMouseUp } from '../state/actions';\nimport { getCellStatus, isLeftDown, isLeftPressed, isNeighbourPressed, isRightDown } from '../state/selectors';\n\ninterface props {\n  x: number;\n  y: number;\n}\n\nconst CellComponent = ({ x, y } : props) => {\n  const key = `${x}_${y}`;\n  const dispatch = useDispatch();\n  let cellStatus = useSelector(getCellStatus(x, y));\n  const leftPressed = useSelector(isLeftPressed(key));\n  const rightDown = useSelector(isRightDown);\n  const leftDown = useSelector(isLeftDown);\n  const neighbourPressed = useSelector(isNeighbourPressed(key))\n  if (cellStatus === Cell.blank) {\n    if (leftPressed || (leftDown && rightDown && neighbourPressed)) {\n      cellStatus = Cell.pressed;\n    }\n  }\n  return (\n    <div\n      key={key}\n      className={`square ${cellStatus}`}\n      onContextMenu={e => {e.preventDefault();}}\n      onMouseDown={(e) => {\n        dispatch(onMouseDown({ key: getMouseKey(e), target: key }));\n        e.stopPropagation();\n      }}\n      onMouseUp={(e) => {\n        const mouseKey = getMouseKey(e);\n        dispatch(onMouseUp({ key: mouseKey, target: key }));\n        if (mouseKey === MouseKey.LEFT) {\n          if (rightDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellLeftClick(x, y));\n          }\n        } else if (mouseKey === MouseKey.RIGHT) {\n          if (leftDown) {\n            dispatch(onCellBothClick(x, y))\n          } else {\n            dispatch(onCellRightClick(x, y));\n          }\n        }\n        e.stopPropagation();\n      } }\n      onMouseOver={(e) => {\n        dispatch(onMouseEnter({ target: key }));\n        e.stopPropagation();\n      }}\n    />\n  ); \n}\nexport default CellComponent;\n","import { range } from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGameConfig } from '../state/selectors';\nimport Cell from './Cell';\n\nconst Board = () => {\n  const { height: h, width: w } = useSelector(getGameConfig);\n  const border =  (key: string) => (<div key={key} className=\"borderlr\" />);\n  var divs = [];\n  for (var y = 0; y < h; ++y) {\n    divs.push(border(`${y}-l`));\n    for (var x = 0; x < w; ++x){\n      divs.push(\n        <Cell\n          key={`${y}-${x}`}\n          x={x}\n          y={y}\n        />\n      );\n    }\n    divs.push(border(`${y}-r`));\n  }\n  const line = range(w).map(i => <div key={i} className=\"bordertb\" />);\n  return (\n    <div className=\"minesweeper-board\" >\n      {divs}\n      <div className=\"borderbl\" />{line}<div className=\"borderbr\" />\t\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\ninterface props {\n\tid: string;\n\tvalue: number,\n};\n\nconst getNthDigit = (value: number, n: number) => {\n  if (n === 1 && value < 0){\n    return \"-\";\n  }\n  var pow = Math.pow(10, 3 - n);\n  var ret = Math.floor((Math.abs(value) / pow) % 10);\n  return Math.abs(ret);\n}\n\nconst ThreeDigitCounter = ({ id, value } : props) => (\n\t<div style={{'backgroundImage':'none'}}>\n\t\t<div className={`time${getNthDigit(value, 1)}`} id={id+\"_hundreds\"} />\n\t\t<div className={`time${getNthDigit(value, 2)}`} id={id+\"_tens\"} />\n\t\t<div className={`time${getNthDigit(value, 3)}`} id={id+\"_ones\"} />\n\t</div>\n);\n\nexport default ThreeDigitCounter;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getSmileyButton } from '../state/selectors';\nimport { onSmileyClick, setSmileyButton } from '../state/actions';\nimport { includes } from 'lodash';\nimport { GameConfig } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\n\nconst getStyles = (config: GameConfig) => {\n  const w = config.width;\n  const margin = (w * 16 - 90 - 26) / 2;\n  return {\n    \"marginLeft\": `${margin}px`,\n    \"marginRight\": `${margin}px`,\n    \"marginTop\": \"3px\",\n    \"marginBottom\": \"3px\"\n  };\n}\n\nconst Smiley = () => {\n  const config = useSelector(getGameConfig);\n  const smiley = useSelector(getSmileyButton);\n  const dispatch = useDispatch();\n  return (\n    <div style={{'backgroundImage':'none'}}>\n      <div id=\"smiley\"\n        className={smiley} style={getStyles(config)}\n        onMouseDown={() => {\n          dispatch(setSmileyButton(SmileyButton.facepressed));\n        }}\n        onMouseUp={() => {\n          if (smiley === SmileyButton.facepressed){\n            dispatch(onSmileyClick());\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n        onMouseOut={() => {\n          const ignoreStates = [SmileyButton.facewin, SmileyButton.facedead, SmileyButton.facesmile];\n          if (!includes(ignoreStates, smiley)) {\n            dispatch(setSmileyButton(SmileyButton.facesmile));\n          }\n        }}\n      />\n    </div>\n  );\n}\nexport default Smiley;\n","import React, { useEffect, useRef } from 'react';\nimport { range } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGameConfig, getMinesCounter, getTimeCounter, isClockRunning } from '../state/selectors';\nimport ThreeDigitCounter from './ThreeDigitCounter';\nimport SmileyButton from './SmileyButton';\nimport { clockTick } from '../state/actions';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const config = useSelector(getGameConfig);\n  const minesCounter = useSelector(getMinesCounter);\n  const timeCounter = useSelector(getTimeCounter);\n  const clockRunning = useSelector(isClockRunning);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  useEffect(() => {\n    if (clockRunning) {\n      intervalRef.current = setInterval(() => { dispatch(clockTick()); }, 1000);\n    } else  if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n  }, [clockRunning, dispatch])\n  const line = range(config.width).map(key => <div key={key} className=\"bordertb\" />);\n  return (\n    <div className=\"msw-header\">\n      <div className=\"bordertl\" />{line}<div className=\"bordertr\" />\n      <div className=\"borderlrlong\"/>\n      <ThreeDigitCounter value={minesCounter} id=\"mines\" />\n      <SmileyButton />\n      <ThreeDigitCounter value={timeCounter} id=\"seconds\"/>\n      <div className=\"borderlrlong\"/>\n      <div className=\"borderjointl\" />{line}<div className=\"borderjointr\" />\n    </div>\n  );\n}\nexport default Header;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { GameConfig } from '../model/Game';\nimport { getGameConfig } from '../state/selectors';\nimport Board from './Board';\nimport Header from './Header';\n\nconst BORDER_WIDTH = 10;\nconst BORDER_HEIGHT = 10;\nconst FIELD_WIDTH = 16;\nconst FIELD_HEIGHT = 16;\nconst HEADER_HEIGHT = 32;\n\nconst calcStyle = (config: GameConfig) => {\n  const widthFieldsNum = config.width;\n  const heightFieldsNum = config.height;\n  const width = 2 * BORDER_WIDTH + widthFieldsNum * FIELD_WIDTH;\n  const height = 3 * BORDER_HEIGHT + FIELD_HEIGHT * heightFieldsNum + HEADER_HEIGHT;\n  return { width, height };\n}\n\nconst Game = () => {\n  const config = useSelector(getGameConfig);\n  return (\n    <div id=\"game\" className=\"msw\" style={calcStyle(config)}>\n      <Header />\n      <Board />\t\t\t\t\t\t\n    </div>\n  );\n}\nexport default Game;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { onMouseEnter } from '../state/actions';\nimport DificultySelector from './DificultySelector';\nimport Game from './Game';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  return (\n    <div\n      className=\"APP z100\"\n      onMouseOver={(e) => dispatch(onMouseEnter({ target: 'APP' }))}\n    >\n      <DificultySelector />\n      <Game />\n    </div>\n  );\n}\nexport default App;\n","import { PayloadAction } from \"typesafe-actions\";\nimport { Cell, getNeighbourIndexes, isBlank, isBombFlag, isNumber, isWin, revealBoardOnClick, revealBoardOnDeath } from \"../model/Cell\";\nimport { Coordinate, getIndexFromCoordinates } from \"../model/Coordinate\";\nimport { initMineField, isBomb } from \"../model/Field\";\nimport { SmileyButton } from \"../model/Smiley\";\nimport { getGameConfig, getWidth } from \"./selectors\";\nimport { RootState } from \"./store\";\n\nconst handleLeftClickForIndex = (state: RootState, index: number) => {\n  const { board, mineField } = state;\n  const w = getWidth(state);\n  const cell = board[index];\n  if (!mineField || !isBlank(cell)) {\n    return state;\n  }\n  const field = mineField[index];\n  if (isBomb(field)) {\n    return ({\n      ...state,\n      clockRunning: false,\n      gameEnded: true,\n      board: revealBoardOnDeath(board, mineField, index),\n      smileyButton: SmileyButton.facedead,\n    });\n  }\n  const newBoard = revealBoardOnClick(board, mineField, index, w);\n  const win = isWin(newBoard, mineField);\n  return ({\n    ...state,\n    board: newBoard,\n    gameEnded: win,\n    clockRunning: !win,\n    smileyButton: win ? SmileyButton.facewin : SmileyButton.facesmile,\n  });\n}\n\nexport const handleLeftClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { gameEnded, gameStarted, board } = state;\n  const {\n    width: w,\n    height: h,\n    mines,\n  } = getGameConfig(state);\n  if (gameEnded) {\n    return state;\n  }\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  if (!gameStarted) {\n    const newMineField = initMineField(w, h, x, y, mines);\n    const newBoard = revealBoardOnClick(board, newMineField, index, w);\n    return ({\n      ...state,\n      gameStarted: true,\n      mineField: newMineField,\n      clockRunning: true,\n      board: newBoard,\n    })\n  }\n  return handleLeftClickForIndex(state, index);\n};\n\nexport const handleRightClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, minesCounter, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (isBlank(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.bombflagged;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter - 1,\n    });\n  }\n  if (isBombFlag(cell)) {\n    const newBoard = [...board];\n    newBoard[index] = Cell.blank;\n    return ({\n      ...state,\n      board: newBoard,\n      minesCounter: minesCounter + 1,\n    });\n  }\n  return state;\n};\n\nexport const handleBothClick = (state: RootState, action: PayloadAction<string, Coordinate>) => {\n  const { board, mineField, gameEnded } = state;\n  if (gameEnded) {\n    return state;\n  }\n  const {\n    width: w,\n   } = getGameConfig(state);\n  const { x, y } = action.payload;\n  const index = getIndexFromCoordinates(x, y, w);\n  const cell = board[index];\n  if (!mineField) {\n    return state;\n  }\n  if (isNumber(cell)) {\n    const neighbourIndexes = getNeighbourIndexes(index, w, board.length);\n    let nextState = {...state};\n    for (let i = 0; i < neighbourIndexes.length; ++i) {\n      const ni = neighbourIndexes[i];\n      nextState = handleLeftClickForIndex(nextState, ni);\n    }\n    return nextState;\n  }\n  return state;\n};","import { createReducer, PayloadAction } from 'typesafe-actions';\nimport { initBoard } from '../model/Cell';\nimport { DifficultyOption, DIFFICULTY_OPTIONS } from '../model/Game';\nimport { MouseKey, MouseClickEvent } from '../model/Mouse';\nimport { SmileyButton } from '../model/Smiley';\nimport {\n  SET_DIFFICULTY,\n  SET_MINES_COUNTER,\n  SET_TIME_COUNTER,\n  SET_SMILEY_BUTTON,\n  ON_MOUSE_DOWN,\n  ON_MOUSE_UP,\n  ON_MOUSE_ENTER,\n  CLOCK_TICK,\n  CELL_LEFT_CLICK,\n  CELL_RIGHT_CLICK,\n  SMILEY_CLICK,\n  CELL_BOTH_CLICK,\n} from './actions';\nimport { handleBothClick, handleLeftClick, handleRightClick } from './gameHelpers';\nimport { RootState } from './store';\n\nconst getInitialState = (difficulty = DIFFICULTY_OPTIONS[0]) => ({\n  difficulty,\n  minesCounter: difficulty.config.mines,\n  timeCounter: 0,\n  smileyButton: SmileyButton.facesmile,\n  board: initBoard(difficulty.config.width, difficulty.config.height),\n  mineField: undefined,\n  mouseLeft: undefined,\n  mouseMiddle: undefined,\n  mouseRight: undefined,\n  clockRunning: false,\n  gameStarted: false,\n  gameEnded: false,\n});\n\nconst reducer = createReducer<RootState>(getInitialState())\n  .handleType(SET_DIFFICULTY, (state: RootState, action: PayloadAction<string, DifficultyOption>) => (\n    getInitialState(action.payload)\n  ))\n  .handleType(SET_MINES_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    minesCounter: action.payload, \n  }))\n  .handleType(SET_TIME_COUNTER, (state: RootState, action: PayloadAction<string, number>) => ({\n    ...state,\n    timeCounter: action.payload, \n  }))\n  .handleType(SET_SMILEY_BUTTON, (state: RootState, action: PayloadAction<string, SmileyButton>) => ({\n    ...state,\n    smileyButton: action.payload, \n  }))\n  .handleType(ON_MOUSE_DOWN, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n        smileyButton: SmileyButton.faceooh,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_UP, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.gameEnded) return state;\n    if (action.payload.key === MouseKey.LEFT) {\n      return ({\n        ...state,\n        mouseLeft: undefined,\n        smileyButton: state.mouseRight ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.MIDDLE) {\n      return ({\n        ...state,\n        mouseMiddle: undefined,\n        smileyButton: (state.mouseRight || state.mouseLeft) ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    if (action.payload.key === MouseKey.RIGHT) {\n      return ({\n        ...state,\n        mouseRight: undefined,\n        smileyButton: state.mouseLeft ? SmileyButton.faceooh : SmileyButton.facesmile,\n      });\n    }\n    return state;\n  })\n  .handleType(ON_MOUSE_ENTER, (state: RootState, action: PayloadAction<string, MouseClickEvent>) => {\n    if (state.mouseLeft !== undefined && state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n        mouseRight: action.payload.target,\n      });\n    }\n    if (state.mouseLeft !== undefined) {\n      return ({\n        ...state,\n        mouseLeft: action.payload.target,\n      });\n    }\n    if (state.mouseMiddle !== undefined) {\n      return ({\n        ...state,\n        mouseMiddle: action.payload.target,\n      });\n    }\n    if (state.mouseRight !== undefined) {\n      return ({\n        ...state,\n        mouseRight: action.payload.target,\n      });\n    }\n    return state;\n  })\n  .handleType(CELL_LEFT_CLICK, handleLeftClick)\n  .handleType(CELL_RIGHT_CLICK, handleRightClick)\n  .handleType(CELL_BOTH_CLICK, handleBothClick)\n  .handleType(SMILEY_CLICK, (state: RootState) => (\n    getInitialState(state.difficulty)\n  ))\n  .handleType(CLOCK_TICK, (state: RootState) => ({\n    ...state,\n    timeCounter: state.timeCounter + 1,\n  }));\n\n  \nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Cell } from '../model/Cell';\nimport { Field } from '../model/Field';\nimport { DifficultyOption } from '../model/Game';\nimport { SmileyButton } from '../model/Smiley';\nimport reducer from './reducer';\n\n\nexport type RootState = {\n  difficulty: DifficultyOption,\n  minesCounter: number,\n  timeCounter: number,\n  smileyButton: SmileyButton,\n  board: Cell[],\n  mineField: Field[] | undefined,\n  mouseLeft: string | undefined,\n  mouseMiddle: string | undefined,\n  mouseRight: string | undefined,\n  clockRunning: boolean,\n  gameStarted: boolean,\n  gameEnded: boolean,\n};\n\nexport default createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './state/store';\nimport './css/minesweeper.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"Screen\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}